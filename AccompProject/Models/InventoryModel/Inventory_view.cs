//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccompProject.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class Inventory_view
    {
        public Nullable<int> ID_DATA { get; set; }
    [Required(ErrorMessage = "Year is required")]
        [DisplayName("YEAR")]
        public Nullable<double> YEAR_COVERED { get; set; }
        [DisplayName("SYSTEM NAME")]
        public string SYSTEMS { get; set; }
        [DisplayName("REGION")]
        public int ID_REGION { get; set; }
        public string REGION { get; set; }
         [DisplayName("PROVINCE")]
        public int ID_PROVINCE { get; set; }
        public string PROVINCE { get; set; }
        public string MUNICIPALITY { get; set; }
         [DisplayName("SERVICE AREA (ha.)")]
        public Nullable<double> SERVICE_ORIGINAL { get; set; }
        [DisplayName("PERMANENTLY NON-RESTORABLE AREA (ha.)")]
        public Nullable<double> PERMANENT { get; set; }
        [DisplayName("CONVERTED LAND (ha.)")]
        public Nullable<double> CONVERTED_LAND { get; set; }
        [DisplayName("FIRMED UP SERVICE AREA (ha.)")]
        public Nullable<double> SERVICE_FIRMED { get; set; }
        [DisplayName("OPERATIONAL AREA (ha.)")]
        public Nullable<double> AREA_OPERATIONAL { get; set; }
        [DisplayName("NON-OPERATIONAL AREA (ha.)")]
        public Nullable<double> AREA_NONOPERATIONAL { get; set; }
        [DisplayName("WET (ha.)")]
        public Nullable<double> IRRIGATED_WET { get; set; }
        [DisplayName("DRY (ha.)")]
        public Nullable<double> IRRIGATED_DRY { get; set; }
        [DisplayName("RATOONING (ha.)")]
        public Nullable<double> IRRIGATED_RATOONING { get; set; }
        [DisplayName("3RD CROP (ha.)")]
        public Nullable<double> THIRD_IRRIGATED { get; set; }
          [DisplayName("WET (ha.)")]
        public Nullable<double> BENEFITED_WET { get; set; }
         [DisplayName("DRY (ha.)")]
        public Nullable<double> BENEFITED_DRY { get; set; }
         [DisplayName("RATOONING (ha.)")]
        public Nullable<double> BENEFITED_RATOONING { get; set; }
         [DisplayName("3RD CROP (ha.)")]
        public Nullable<double> THIRD_BENEFITED { get; set; }
         [DisplayName("WET")]
        public Nullable<double> AVERAGE_YIELD { get; set; }
        [DisplayName("DRY")]
        public Nullable<double> AVERAGE_YIELD_DRY { get; set; }
        [DisplayName("RATOONING")]
        public Nullable<double> AVERAGE_YIELD_RATOONING { get; set; }
        [DisplayName("3RD CROP")]
        public Nullable<double> THIRD_AVERAGE { get; set; }
        [DisplayName("DATE CONSTRUCTED")]
        public string DATE_CONSTRUCTED { get; set; }
        [DisplayName("SPECIFIC DIVERSION")]
        public string SPECIFIC_DIVERSION { get; set; }
        [DisplayName("SOURCE OF WATER SUPPLY")]
        public string WATER_SUPPLY { get; set; }
        public string LATITUDE { get; set; }
        public string LONGITUDE { get; set; }
        public string DATE_UPDATED { get; set; }
        public string REMARKS { get; set; }
        public Nullable<double> NOSYSTEM { get; set; }
        public string AMORTIZING { get; set; }
        [DataType(DataType.MultilineText)]
        [DisplayName("REMARKS")]
        public string REMARKS_REASON { get; set; }
        [DisplayName("FARMER BENEFICIARIES")]
        public Nullable<double> FARMERS_BENEFICIARIES { get; set; }
        [DisplayName("RESPONSIBILITY REGION")]
        public Nullable<double> RESPONSIBILITY { get; set; }
        [DisplayName("IMO")]
        public string IMO_RES { get; set; }
        [DisplayName("CATEGORY")]
        public int ID_CATEGORY { get; set; }
        public string DESCRIPTION { get; set; }
        [DisplayName("DISTRICT")]
        public int ID_DISTRICT { get; set; }
        public string DISTRICT { get; set; }
        [DisplayName("OCI")]
        public int ID_OCI { get; set; }
        public string OCI_DES { get; set; }
        [DisplayName("TYPE OF DIVERSION")]
        public int ID_DIVERSION { get; set; }
        public string TYPE { get; set; }
        [DisplayName("CROPS")]
        public int ID_CROPS { get; set; }
        public string CROPS { get; set; }
        public string RES { get; set; }
        public string DES_IMO { get; set; }
        public string IMO { get; set; }
        public string ENG { get; set; }
        public string RIM { get; set; }
        public string res_region { get; set; }
        public string area_monitor { get; set; }
        public Nullable<double> POP { get; set; }
        public string political { get; set; }
        public string spec { get; set; }
        public string ISLAND { get; set; }
        public int POLITICAL_ID { get; set; }
        public Nullable<double> LINED { get; set; }
        public Nullable<double> UNLINED { get; set; }
        [DisplayName("NEWLY GENERATED AREAS")]
        public Nullable<double> NEWLY { get; set; }
        public string DAMTYPE { get; set; }
        public string SD { get; set; }
        public Nullable<int> newlyarea { get; set; }
        public string IDSystem { get; set; }
        [DisplayName("NO. OF IA")]
        public Nullable<double> iano { get; set; }
        [DisplayName("IA AREA")]
        public Nullable<double> iaarea { get; set; }
        [DisplayName("FARMER BENEFICIARIES")]
        public Nullable<double> iafb { get; set; }
        [DisplayName("NO. OF MEMBERS")]
        public Nullable<double> iamember { get; set; }
        [DisplayName("TOTAL LENGTH (km.)")]
        public Nullable<double> main_total { get; set; }
        [DisplayName("LINED CANAL (km.)")]
        public Nullable<double> main_lined { get; set; }
        [DisplayName("EARTH CANAL (km.)")]
        public Nullable<double> main_earth { get; set; }
        [DisplayName("TOTAL LENGTH (km.)")]
        public Nullable<double> lateral_total { get; set; }
        [DisplayName("LINED CANAL (km.)")]
        public Nullable<double> lateral_lined { get; set; }
        [DisplayName("EARTH CANAL (km.)")]
        public Nullable<double> lateral_earth { get; set; }
        public string CoordinatesChecking { get; set; }
                [DisplayName("MUNICIPALITY")]
        public Nullable<int> municipalityCode { get; set; }
                [DisplayName("PROVINCE")]
        public Nullable<int> provinceCode { get; set; }
        // [Required(ErrorMessage = "Dam is required")]
        [DisplayName("DAM NAME")]        
        public string dam { get; set; }

        //public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        //{

        //                double? tot1 = 0;
        //                double? tot2 = 0;

        //                if (SERVICE_FIRMED == null){
        //                    tot1 += 0;
        //                }else{
        //                    tot1 += SERVICE_FIRMED;A:\JERVY FILES\MY PROGRAM\AccompProject\AccompProject\Models\InventoryModel\TblData.cs
        //                }

        //                if (PERMANENT == null)
        //                {
        //                    tot1 += 0;
        //                }
        //                else
        //                {
        //                    tot1 += PERMANENT;
        //                }

        //                if (CONVERTED_LAND == null)
        //                {
        //                    tot1 += 0;
        //                }
        //                else
        //                {
        //                    tot1 += CONVERTED_LAND;
        //                }

        //                if (AREA_OPERATIONAL == null)
        //                {
        //                    tot2 += 0;
        //                }
        //                else
        //                {
        //                    tot2 += AREA_OPERATIONAL;
        //                }

        //                if (AREA_NONOPERATIONAL == null)
        //                {
        //                    tot2 += 0;
        //                }
        //                else
        //                {
        //                    tot2 += AREA_NONOPERATIONAL;
        //                }

            

        //    //if (SERVICE_ORIGINAL != (tot1))
        //    //{
        //    //    yield return new ValidationResult("Total area of Fusa, Permanent and Converted should be equal to Service area!");
        //    //}

        //    //if (SERVICE_FIRMED != (tot2))
        //    //{
        //    //    yield return new ValidationResult("Operational plus Non Operational should be equal to FUSA!");
        //    //}


        //}


      
        
    }
}
