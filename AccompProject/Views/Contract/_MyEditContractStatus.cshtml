@model AccompProject.Models.ContractStatusView


<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>




    @if (User.IsInRole("Physical"))
    {
        <h4 class="modal-title" id="myModalLabel">Regional Office</h4>  <h4>
            @Session["subproject"].ToString()
        </h4>
    }
</div>

@using (Html.BeginForm())

{
    <div class="modal-body">
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.ContractStatusID)
            @Html.HiddenFor(model => model.ContractID)
            @Html.HiddenFor(model => model.region)
            @Html.HiddenFor(model => model.subproject)
            @Html.HiddenFor(model => model.projectmonitor)
            @Html.HiddenFor(model => model.IDAccomp)

           
            @Html.Raw(TempData["msg"])
            
            <input id="sessionInput" type="hidden" value=@Session["subproject"].ToString()  />
            
            <hr />


            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.yr, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.yr, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.yr, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.mnt, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @*@Html.EditorFor(model => model.mnt, new { htmlAttributes = new { @class = "form-control" } })*@
                    @*@Html.DropDownListFor(model => model.mnt, Enum.GetValues(typeof(monthname)).Cast<monthname>().Select(model => new SelectListItem { Text = model.ToString(), Value = model.ToString() }), new { htmlAttributes = new { @class = "form-control" } })*@

                    @Html.DropDownListFor(model => model.mnt, EnumHelper.GetSelectList(typeof(AccompProject.Models.monthname)), "Select Type", new { htmlAttributes = new { @class = "form-control" } })

                    @Html.ValidationMessageFor(model => model.mnt, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Planned, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Planned, new { htmlAttributes = new { @class = "form-control" ,id = "targetPhy"} })
                    @Html.ValidationMessageFor(model => model.Planned, "", new { @class = "text-danger" })
                </div>

            </div>



            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised, "", new { @class = "text-danger" })
                </div>

            </div>

            <hr />
            <div class="form-group">
                <div class="col-md-offset-5">
                    <b><u>REVISED</u></b>

                </div>
            </div>

     
            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised1, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised1, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised1, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised2, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised2, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised2, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised3, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised3, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised3, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised4, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised4, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised4, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised5, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised5, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised5, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised6, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised6, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised6, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised7, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised7, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised7, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised8, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised8, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised8, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Revised9, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Revised9, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Revised9, "", new { @class = "text-danger" })
                </div>

            </div>









            <hr />


            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Actual, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Actual, new { htmlAttributes = new { @class = "form-control" , id = "actualPhy"} })
                    @Html.ValidationMessageFor(model => model.Actual, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>

            </div>

            <div id="actionmc" class="form-group" style="display:none">


                <h5> Action Taken (MC 40 s.2017)</h5>

                <div class="col-md-2">
                    @Html.LabelFor(model => model.ActionDate, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ActionDate, new { htmlAttributes = new { @class = "form-control datepicker", id="dteaction" } })
                    @Html.ValidationMessageFor(model => model.ActionDate, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-2">
                    @Html.LabelFor(model => model.ActionWarning, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ActionWarning, new { htmlAttributes = new { @class = "form-control " } })
                    @Html.ValidationMessageFor(model => model.ActionWarning, "", new { @class = "text-danger" })
                </div>



            </div>



        </div>


     
    </div>



    <div id="divProcessing">
        @*<p>Processing, please wait . . . <img src="../../Content/ajax-loader.gif"></p>*@
    </div>

    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Cancel</button>
        <input class="btn btn-primary" type="submit" value="Update" />
    </div>
}




<style>
    #divProcessing {
        display: none;
    }

        #divProcessing.show {
            display: block;
            position: absolute;
            z-index: 100;
            background-image: url('../../Content/ajax-loader.gif');
            background-color: #666;
            opacity: 0.4;
            background-repeat: no-repeat;
            background-position: center;
            left: 0;
            bottom: 0;
            right: 0;
            top: 0;
        }

    #loadinggif.show {
        left: 50%;
        top: 50%;
        position: absolute;
        z-index: 101;
        width: 32px;
        height: 32px;
        margin-left: -16px;
        margin-top: -16px;
    }
</style>

<script type="text/javascript">

    $(function () {

        var getSessionValue = $('#sessionInput').val();

        //alert(getSessionValue);

        if ($('#dteaction').val() != null) {
            $('#actionmc').show();
        }


        $('.datepicker').datepicker();

        $('#actualPhy').focusout(function () {

          //  alert($('#actualPhy').val());
          //  $('#actionmc').show();

            var actualvalue = $(this).val();
            var MCvalue = 0;
            var targetValue = $('#targetPhy').val();


            if (actualvalue < targetValue) {

                MCvalue = targetValue - actualvalue
              //  alert(MCvalue);
                if (MCvalue >= 5) {

                    $('#actionmc').show();

                }

            } else {
                $('#actionmc').hide();

            }



        });


        $('.numformat').keyup(function (event) {
            // skip for arrow keys

            //var $self = $(this);
            //$self.tooltip('show');

            if (event.which >= 37 && event.which <= 40) {
                event.preventDefault();
            }

            var currentVal = $(this).val();
            var testDecimal = testDecimals(currentVal);
            if (testDecimal.length > 1) {
                console.log("You cannot enter more than one decimal point");
                currentVal = currentVal.slice(0, -1);
            }

            //  $(this).val(replaceCommas(currentVal));

            var newval = replaceCommas(currentVal);
            //   $(this).tooltip("option", "content", "Superb Title");
            $(this).attr('data-content', newval);
            $(this).popover('show');

        });

        function testDecimals(currentVal) {
            var count;
            currentVal.match(/\./g) === null ? count = 0 : count = currentVal.match(/\./g);
            return count;
        }

        function replaceCommas(yourNumber) {
            var components = yourNumber.toString().split(".");
            if (components.length === 1)
                components[0] = yourNumber;
            components[0] = components[0].replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            if (components.length === 2)
                components[1] = components[1].replace(/\D/g, "");
            return components.join(".");
        }






    });
    //$("#jd").focusout(function () {
    //    var d = $("#jd").val();
    //    alert(d);
    //});


    //$("#as_of").val(function () {


    //var date = new Date();
    //var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
    //var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);

    //var lastDayWithSlashes = (lastDay.getDate()) + '/' + (lastDay.getMonth() + 1) + '/' + lastDay.getFullYear();

    //return lastDayWithSlashes;


    //});


    //$(".date").datepicker(

    //    {
    //        dateFormat: 'mm-dd-yy',
    //        minDate: '+5d',
    //        changeMonth: true,
    //        changeYear: true,
    //        altField: ".date"
    //        //onSelect: function (dateText, inst) {
    //        //    var date = $(this).datepicker('getDate'),
    //        //        day = date.getDate(),
    //        //        month = date.getMonth() + 1,
    //        //        year = date.getFullYear();
    //        //    alert(day + '-' + month + '-' + year);
    //        // }

    //    });

    //$(".asadate").datepicker(

    //       {
    //dateFormat: 'mm-dd-yy',
    //minDate: '+5d',
    //changeMonth: true,
    //changeYear: true,
    //altField: ".asadate"
    //onSelect: function (dateText, inst) {
    //    var date = $(this).datepicker('getDate'),
    //        day = date.getDate(),
    //        month = date.getMonth() + 1,
    //        year = date.getFullYear();
    //    alert(day + '-' + month + '-' + year);
    // }

    //      });


    //$(".dates").datepicker({
    //    dateFormat: 'mm-dd-yy',
    //    minDate: '+5d',
    //    changeMonth: true,
    //    changeYear: true,
    //    altField: ".dates"


    //    });

    // });



</script>
