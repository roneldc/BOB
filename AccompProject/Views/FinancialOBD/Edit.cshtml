@model AccompProject.Models.FinancialNCAADAView

@{
    ViewBag.Title = "BUR, Obligation and Disbursement";
}

<h2>BUR, Obligation and Disbursement</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IDAccomp)
        @Html.HiddenFor(model => model.as_of)
       @* @Html.HiddenFor(model => model.year_covered)*@
        @*@Html.HiddenFor(model => model.)*@




        <div class="form-group">

            <div class="row">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.mainproject, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.mainproject, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.mainproject, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.amount, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.amount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", Id = "amt" } })
                    @Html.ValidationMessageFor(model => model.amount, "", new { @class = "text-danger" })


                </div>

            </div>
        </div>

        <div class="form-group">

            <div class="row">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.subproject, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.subproject, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.subproject, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.municipality, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.municipality, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.municipality, "", new { @class = "text-danger" })


                </div>

            </div>
        </div>



        <div class="form-group">

            <div class="row">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.province, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.province, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.province, "", new { @class = "text-danger" })

                </div>

          

            </div>
        </div>


        <div class="form-group">

            <div class="row">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.asano, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.asano, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.asano, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.asaamount, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.asaamount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.asaamount, "", new { @class = "text-danger" })

                </div>

            </div>
        </div>
     
  
        <div class="form-group">

            <div class="row">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.NTANO, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.NTANO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.NTANO, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.NTAAmount, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.NTAAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.NTAAmount, "", new { @class = "text-danger" })

                </div>

            </div>
        </div>
        
        <div class="form-group">

            <div class="row">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.ADANO, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.ADANO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ADANO, "", new { @class = "text-danger" })

                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.ADAAmount, htmlAttributes: new { @class = "control-label col-md-2" })

                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.ADAAmount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ADAAmount, "", new { @class = "text-danger" })

                </div>

            </div>
        </div>

        <hr />




    </div>

}
@*<div class="form-group">
    <div class="row">
        <div class="control-label col-md-3">AS OF</div>
        <div> <input type="text" id="mndt" class=" col-md-3 form-control" /></div>
        <div><input type="submit" value="Search" class="btn btn-primary btn-large" /></div>
    </div>
</div>*@


<div id="myModal" class="modal fade in">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="myModalContent"></div>
        </div>
    </div>
</div>

<div class="form-group">

    <div class="row">
        <div id="replacetarget">
            @if (User.IsInRole("Financial") || User.IsInRole("Financial Region"))
            {
                { Html.RenderAction("Index", "FinancialOBD", new { id = Model.IDNCAADA, idaccomp = Model.IDAccomp, idfinance = Model.IDFinance }); }
                
            }
            
        </div>
    </div>
</div>



<div>
    @Html.ActionLink("Back to List", "MyIndex")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
            $('#mndt').datepicker(
                           {
                               dateFormat: "mm/yy",
                               changeMonth: true,
                               changeYear: true,
                               showButtonPanel: true,
                               onClose: function (dateText, inst) {


                                   function isDonePressed() {
                                       return ($('#ui-datepicker-div').html().indexOf('ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all ui-state-hover') > -1);
                                   }

                                   if (isDonePressed()) {
                                       var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
                                       var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
                                       $(this).datepicker('setDate', new Date(year, month, 1)).trigger('change');

                                       $('.date-picker').focusout()//Added to remove focus from datepicker input box on selecting date
                                   }
                               },
                               beforeShow: function (input, inst) {

                                   inst.dpDiv.addClass('month_year_datepicker')

                                   if ((datestr = $(this).val()).length > 0) {
                                       year = datestr.substring(datestr.length - 4, datestr.length);
                                       month = datestr.substring(0, 2);
                                       $(this).datepicker('option', 'defaultDate', new Date(year, month - 1, 1));
                                       $(this).datepicker('setDate', new Date(year, month - 1, 1));
                                       $(".ui-datepicker-calendar").hide();
                                   }
                               }
                           })
        });

    </script>

}
