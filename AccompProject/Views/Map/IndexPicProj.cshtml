<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyASJVuQHTbnowA2fyqOgCg7r67ru71lAmQ&libraries=drawing"></script>
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>
<br />
<div class="row">
    <div class="col-md-offset-2 col-md-10">
        <div class="alert alert-danger" style="display:none" role="alert" id="errormessage"></div>
        <div class="alert alert-success" style="display:none" role="alert" id="successmessage"></div>
    </div>
</div>
<br />
<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 550px;"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {

    <section class="scripts">

        <script src="~/Scripts/markerclusterer.js"></script>
        <script type="text/javascript">


    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {
        var markerdatabase = @Html.Raw(ViewBag.MarkersPIC);
        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Tunisie = new google.maps.LatLng(14.638659, 121.043078);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 10,
            center: Tunisie,
            draggable: true,
            mapTypeId: google.maps.MapTypeId.HYBRID
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
        // a sample list of JSON encoded data of places to visit in Tunisia
        // you can either make up a JSON list server side, or call it from a controller using JSONResult

        //var drawingManager = new google.maps.drawing.DrawingManager({
        //    drawingMode: google.maps.drawing.OverlayType.MARKER,
        //    drawingControl: true,
        //    drawingControlOptions: {
        //        position: google.maps.ControlPosition.TOP_CENTER,
        //        drawingModes: ['marker', 'circle', 'polygon', 'polyline', 'rectangle']
        //    },
        //    markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
        //    circleOptions: {
        //        fillColor: '#ffff00',
        //        fillOpacity: 1,
        //        strokeWeight: 5,
        //        clickable: false,
        //        editable: true,
        //        zIndex: 1
        //    }
        //});
        //drawingManager.setMap(map);


      



        var iconBase = '../Pic/';
        var icons = {
            2: {
                icon: iconBase + 'c.png'
            },
            1: {
                icon: iconBase + 'n.png'
            },
            4: {
                icon: iconBase + 'o.png'
            },
            3: {
                icon: iconBase + 'p.png'
            }
        };


        var markers = [];
        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(markerdatabase, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                'title': item.Systems,
                'Id' : item.ID,
                'icon': icons[item.CATEGORY].icon,
                'draggable' : true

            });


            // Make the marker-pin blue!

            marker.addListener('dragend', function(event){

            //    alert('Latitude : ' + event.latLng.lat() + ', ' + 'Longitude : ' + event.latLng.lng() + ' ' + this.Id);
                var $myid = this.Id;
              //  alert($myid);

                var data = JSON.stringify({
                    'id': $myid,
                    'lat': event.latLng.lat(),
                    'lng': event.latLng.lng()
                });

                //{ id: $myid, lat: event.latLng.lat(), lng:  event.latLng.lng() },
                $.ajax({
                    url: '/Map/IndexPic',
                    data: data,
                    type: "POST",
                    contentType: 'application/json',
                    dataType: "json",
                    success: function (data) {
                        if (data.success == true) {
                            $("#successmessage").html("SAVED").show().delay(5000).fadeOut();
                            return true;
                        }
                        if (data.ExceptionMessage) {
                            $("#errormessage").html(data.ExceptionMessage).show().delay(5000).fadeOut();
                            return false;
                        }
                        return false;
                    }
                });





            });

            infoWindow(marker,map,item.Systems,item.Municipality,item.MAPSYSTEM,item.MAPLOC)





            markers.push(marker);
        })
        console.log(markers);
        var markerCluster = new MarkerClusterer(map, markers, {imagePath:  '/Pic/Marker/m'});



    }


            google.maps.event.addDomListener(window, "load", Initialize);
            // global infowindow
            var iw = new google.maps.InfoWindow({
                maxWidth: 350



            });

            function infoWindow(marker, map, system, municipality,mapsystem,maploc) {

            

                google.maps.event.addListener(marker, 'click', function() {

               
                    
                    var html = "<div>"  + "NAME OF SYSTEMS : " + system +  "</div>" +
                           "<div>"  + "MUNICIPALITY : " + municipality + "</div>"
                    + "<img src=" + "data:image/png;base64," + mapsystem  + " width='100'/>"
                   

                  //    +     "<img src=" + "../Pic/UploadedPics/"+ maploc + " style=" + "width:200px;" + " height:100px />"


                    //var html = '<iframe title="YouTube video player" type="text/html" width="100%" height="100%" src="http://www.insecam.org/en/view/427323/" frameborder="0"></iframe>';


                    // set the content (saved in html variable using function closure)
                    iw.setContent(html);
                    // open the infowindow on the marker.
                    iw.open(map, marker);
                });
            }




        </script>

    </section>
}
