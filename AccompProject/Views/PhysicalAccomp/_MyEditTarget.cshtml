    @model AccompProject.Models.PhysicalAccompView



<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>




    @if (User.IsInRole("Physical"))
    {
        <h4 class="modal-title" id="myModalLabel">Regional Office</h4>  <h4>
            @Session["subproject"].ToString()
        </h4>
    }
</div>

@using (Html.BeginForm())

{
    <div class="modal-body" >
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <div class="row">
                <div class="col-md-offset-2 col-md-10">
                    <div class="alert alert-danger" style="display:none" role="alert" id="errormessage"></div>
                    <div class="alert alert-success" style="display:none" role="alert" id="successmessage"></div>
                </div>
            </div>

            @*@Html.Raw(TempData["msg"])*@


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.IDAccomp)
            @Html.HiddenFor(model => model.IDPhysical)
            @Html.HiddenFor(model => model.mnt, new { id = "mnts" })
            @Html.HiddenFor(model => model.yr, new { id = "yrs" })
            @Html.HiddenFor(model => model.newed)
            @Html.HiddenFor(model => model.restored)
            @Html.HiddenFor(model => model.rehab)
            @Html.HiddenFor(model => model.canals)
            @Html.HiddenFor(model => model.canal_lining)
            @Html.HiddenFor(model => model.structures)
            @Html.HiddenFor(model => model.roads)

            @Html.HiddenFor(model => model.HDPE)
            @Html.HiddenFor(model => model.COCONET)
            @Html.HiddenFor(model => model.GRAVEL)
            @Html.HiddenFor(model => model.year)

            @Html.HiddenFor(model => model.region)
            @Html.HiddenFor(model => model.projectmonitor)
            @Html.HiddenFor(model => model.mainproject)
            @Html.HiddenFor(model => model.subproject)



            <div class="form-group">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.physicaltarget, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.physicaltarget, new { htmlAttributes = new { @class = "form-control check", Id = "PhyT" } })
                    @Html.ValidationMessageFor(model => model.physicaltarget, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.physicaltargetvalueaccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.physicaltargetvalueaccomp, new { htmlAttributes = new { @class = "form-control check", Id = "valueaT", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.physicaltargetvalueaccomp, "", new { @class = "text-danger" })
                </div>

            </div>


            @Html.HiddenFor(model => model.asof)

        
            <hr />


            @Html.HiddenFor(model => model.newarea)

            @Html.HiddenFor(model => model.restorearea)
          
            @Html.HiddenFor(model => model.rehabarea)
            <hr />
          
            @Html.HiddenFor(model => model.canalsaccomp)
            @Html.HiddenFor(model => model.canal_liningaccomp)
            @Html.HiddenFor(model => model.structuresaccomp)

            @Html.HiddenFor(model => model.roadsaccomp)
            @Html.HiddenFor(model => model.fbaccomp)

            


            @Html.HiddenFor(model => model.jobsaccomp)
            @Html.HiddenFor(model => model.HDPEACCOMP)

            @Html.HiddenFor(model => model.COCONETACCOMP)
            @Html.HiddenFor(model => model.GRAVELACCOMP)
            @Html.HiddenFor(model => model.Physical)
            @Html.HiddenFor(model => model.ValueAccomp)

            @Html.HiddenFor(model => model.Financial)
            @Html.HiddenFor(model => model.Expenditures)
            @Html.HiddenFor(model => model.remarksAccomp)


        </div>


     
    </div>

    
    
    
    

    <div id="divProcessing">
        @*<p>Processing, please wait . . . <img src="../../Content/ajax-loader.gif"></p>*@
    </div>


    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Cancel</button>
        <input class="btn btn-primary" type="submit" value="Update" id="btnupdate"/>
    </div>



 
}

<style>

    
#divProcessing
{
    display : none;
}

#divProcessing.show
{
    display : block;
    position : absolute;
    z-index: 100;
    background-image : url('../../Content/ajax-loader.gif');
    background-color:#666;
    opacity : 0.4;
    background-repeat : no-repeat;
    background-position : center;
    left : 0;
    bottom : 0;
    right : 0;
    top : 0;
}
#loadinggif.show
{
    left : 50%;
    top : 50%;
    position : absolute;
    z-index : 101;
    width : 32px;
    height : 32px;
    margin-left : -16px;
    margin-top : -16px;
}




</style>

<script type="text/javascript">

    $(function () {
      

        var valFocusinNew = $('#newarea').val();
        var valFocusinRestore = $('#restorearea').val();
        var valFocusinRehab = $('#rehabarea').val();
        var valFocusinCanal = $('#canalsaccomp').val();
        var valFocusinCanalLining = $('#canal_liningaccomp').val();
        var valFocusinStructure = $('#structuresaccomp').val();
        var valFocusinJobs = $('#jobsaccomp').val();
        var valFocusinFB = $('#fbaccomp').val();
        var valFocusinRoad = $('#roadsaccomp').val();
        var valFocusinhdpe = $('#HDPEACCOMP').val();
        var valFocusincoconet = $('#COCONETACCOMP').val();
        var valFocusingravel = $('#GRAVELACCOMP').val();
        var valFocusinphysical = $('#Phy').val();
        var valFocusinfinancial = $('#fin').val();
        var valFocusinvalueacc = $('#valuea').val();
        var valFocusinexpenditures = $('#exped').val();

      
        console.log(valFocusinphysical);
        console.log(valFocusinNew);
        console.log(valFocusinRestore);
        $(".check").blur(function () {

            //console.log("after");
            //console.log(valFocusinNew);
            //console.log(valFocusinRestore);
            //console.log($(this).val());


            var error = '';
            error = "Accomplishment must be greater or equal to previous month!";
            var myvalue = parseFloat($(this).val());
            var myid = $(this).attr('Id');

            //if (myid == 'newarea') {

            //    if (valFocusinNew > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();
            //        $(this).val(valFocusinNew);
            //    }


            //}
            //if (myid == 'restorearea') {

            //    if (valFocusinRestore > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinRestore);
            //    }


            //}

            //if (myid == 'rehabarea') {

            //    if (valFocusinRehab > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinRehab);
            //    }


            //}
            //if (myid == 'canalsaccomp') {

            //    if (valFocusinCanal > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinCanal);
            //    }


            //}
            //if (myid == 'canal_liningaccomp') {

            //    if (valFocusinCanalLining > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinCanalLining);
            //    }


            //}
            //if (myid == 'structuresaccomp') {

            //    if (valFocusinStructure > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinStructure);
            //    }


            //}
            //if (myid == 'jobsaccomp') {

            //    if (valFocusinJobs > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinJobs);
            //    }


            //}
            //if (myid == 'fbaccomp') {

            //    if (valFocusinFB > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinFB);
            //    }


            //}
            //if (myid == 'roadsaccomp') {

            //    if (valFocusinRoad > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinRoad);
            //    }


            //}
            //if (myid == 'HDPEACCOMP') {

            //    if (valFocusinhdpe >myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinhdpe);
            //    }


            //}


            //if (myid == 'COCONETACCOMP') {

            //    if (valFocusincoconet > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusincoconet);
            //    }


            //}
            //if (myid == 'GRAVELACCOMP') {

            //    if (valFocusingravel > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusingravel);
            //    }


            //}
            //if (myid == 'Phy') {
            //    if ((valFocusinphysical) > (myvalue)) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();
            //        $("#valuea").val(valFocusinvalueacc);
            //        $(this).val(valFocusinphysical);
            //    }


            //}
            //if (myid == 'fin') {

            //    if (valFocusinfinancial > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();
            //        $("#exped").val(valFocusinexpenditures);
            //        $(this).val(valFocusinfinancial);
            //    }


            //}



            //if (myid == 'valuea') {
            // //   alert("a");
            //    if (valFocusinvalueacc > $(this).val()) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinvalueacc);
            //    }


            //}


            //if (myid == 'exped') {

            //    if (valFocusinexpenditures > $(this).val()) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinexpenditures);
            //    }


            //}
           



        });

        $("#btnupdate").click(function () {
            
        //    alert('hellow');

        });

        setTimeout(function () {

            $('.fde').hide('fade');

        },5000);

        $("#fin").keyup(function (event) {
            alert("test");
            var myval = parseFloat($("#fin").val());
            var amt = parseFloat($("#amt").val());

            $("#exped").val(((myval * amt * 10)));

        });

        $("#PhyT").keyup(function (event) {

            var ival = parseFloat($("#PhyT").val());
            var amt1 = parseFloat($("#amt").val());
            $("#valueaT").val((ival * amt1 *10));

        });

        var dateTodays = "0" + $('#mnts').val() + "/1/" + $('#yrs').val();
        var dateToday = new Date(dateTodays);
        //   alert(dateToday)
        $('#mndt').datepicker(
                       {
                           dateFormat: "mm/yy",
                           changeMonth: true,
                           changeYear: true,
                           showButtonPanel: true,
                           minDate: dateToday,
                           onClose: function (dateText, inst) {


                               function isDonePressed() {
                                   return ($('#ui-datepicker-div').html().indexOf('ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all ui-state-hover') > -1);
                               }

                               if (isDonePressed()) {
                                   var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
                                   var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
                                   $(this).datepicker('setDate', new Date(year, month, 1)).trigger('change');


                                   var a = parseInt($("#ui-datepicker-div .ui-datepicker-month :selected").val());
                                   var b = parseInt(1);
                                   var c = a + b;


                                   $('#mnts').val(c);

                                   $('#yrs').val(year);

                                   $('.date-picker').focusout()//Added to remove focus from datepicker input box on selecting date
                               }
                           },
                           beforeShow: function (input, inst) {

                               inst.dpDiv.addClass('month_year_datepicker')

                               if ((datestr = $(this).val()).length > 0) {
                                   year = datestr.substring(datestr.length - 4, datestr.length);
                                   month = datestr.substring(0, 2);
                                   $(this).datepicker('option', 'defaultDate', new Date(year, month - 1, 1));
                                   $(this).datepicker('setDate', new Date(year, month - 1, 1));
                                   $(".ui-datepicker-calendar").hide();
                               }
                           }
                       })


    });

</script>

<style>
    .ui-datepicker-calendar {
        display: none;
    }
</style>