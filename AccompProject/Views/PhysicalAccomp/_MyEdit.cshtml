@model AccompProject.Models.PhysicalAccompView



<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>




    @if (User.IsInRole("Physical"))
    {
        <h4 class="modal-title" id="myModalLabel">Regional Office</h4>  <h4>
            @Session["subproject"].ToString()
        </h4>
    }
</div>

@using (Html.BeginForm())
{
    <div class="modal-body">
        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <div class="row">
                <div class="col-md-offset-2 col-md-10">
                    <div class="alert alert-danger" style="display:none" role="alert" id="errormessage"></div>
                    <div class="alert alert-success" style="display:none" role="alert" id="successmessage"></div>
                </div>
            </div>

            @Html.Raw(TempData["msg"])


            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.IDAccomp)
            @Html.HiddenFor(model => model.IDPhysical)
            @Html.HiddenFor(model => model.mnt, new { id = "mnts" })
            @Html.HiddenFor(model => model.yr, new { id = "yrs" })
            @Html.HiddenFor(model => model.newed)
            @Html.HiddenFor(model => model.restored)
            @Html.HiddenFor(model => model.rehab)
            @Html.HiddenFor(model => model.canals)
            @Html.HiddenFor(model => model.canal_lining)
            @Html.HiddenFor(model => model.structures)
            @Html.HiddenFor(model => model.roads)

            @Html.HiddenFor(model => model.HDPE)
            @Html.HiddenFor(model => model.COCONET)
            @Html.HiddenFor(model => model.GRAVEL)
            @Html.HiddenFor(model => model.year)

            @Html.HiddenFor(model => model.region)
            @Html.HiddenFor(model => model.projectmonitor)
            @Html.HiddenFor(model => model.mainproject)
            @Html.HiddenFor(model => model.subproject)
            @Html.HiddenFor(model => model.physicaltarget)
            @Html.HiddenFor(model => model.physicaltargetvalueaccomp)








            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.asof, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(model => model.asof, new { htmlAttributes = new { @class = "form-control", id = "mndtsssss", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.asof, "", new { @class = "text-danger" })
                </div>

            </div>
            <hr />




            <h4>ACCOMPLISHMENT</h4>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.newarea, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.newarea, new { htmlAttributes = new { @class = "form-control check", Id = "newarea" } })
                    @Html.ValidationMessageFor(model => model.newarea, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.restorearea, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.restorearea, new { htmlAttributes = new { @class = "form-control saroamount check", Id = "restorearea" } })
                    @Html.ValidationMessageFor(model => model.restorearea, "", new { @class = "text-danger" })
                </div>


            </div>
            <hr />
            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.rehabarea, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.rehabarea, new { htmlAttributes = new { @class = "form-control datepicker check", Id = "rehabarea" } })
                    @Html.ValidationMessageFor(model => model.rehabarea, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.canalsaccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.canalsaccomp, new { htmlAttributes = new { @class = "form-control check", Id = "canalsaccomp" } })
                    @Html.ValidationMessageFor(model => model.canalsaccomp, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.canal_liningaccomp, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.canal_liningaccomp, new { htmlAttributes = new { @class = "form-control saroamount check", Id = "canal_liningaccomp" } })
                    @Html.ValidationMessageFor(model => model.canal_liningaccomp, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-2">
                    @Html.LabelFor(model => model.structuresaccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.structuresaccomp, new { htmlAttributes = new { @class = "form-control datepicker check", Id = "structuresaccomp" } })
                    @Html.ValidationMessageFor(model => model.structuresaccomp, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.roadsaccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.roadsaccomp, new { htmlAttributes = new { @class = "form-control check", Id = "roadsaccomp" } })
                    @Html.ValidationMessageFor(model => model.roadsaccomp, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.fbaccomp, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.fbaccomp, new { htmlAttributes = new { @class = "form-control saroamount check", Id = "fbaccomp" } })
                    @Html.ValidationMessageFor(model => model.fbaccomp, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-2">
                    @Html.LabelFor(model => model.jobsaccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.jobsaccomp, new { htmlAttributes = new { @class = "form-control datepicker check", Id = "jobsaccomp" } })
                    @Html.ValidationMessageFor(model => model.jobsaccomp, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.HDPEACCOMP, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.HDPEACCOMP, new { htmlAttributes = new { @class = "form-control check", Id = "HDPEACCOMP" } })
                    @Html.ValidationMessageFor(model => model.HDPEACCOMP, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.COCONETACCOMP, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.COCONETACCOMP, new { htmlAttributes = new { @class = "form-control saroamount check", Id = "COCONETACCOMP" } })
                    @Html.ValidationMessageFor(model => model.COCONETACCOMP, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-2">
                    @Html.LabelFor(model => model.GRAVELACCOMP, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-2">
                    @Html.EditorFor(model => model.GRAVELACCOMP, new { htmlAttributes = new { @class = "form-control datepicker check", Id = "GRAVELACCOMP" } })
                    @Html.ValidationMessageFor(model => model.GRAVELACCOMP, "", new { @class = "text-danger" })
                </div>
            </div>
            <hr />
            <div class="form-group">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Physical, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Physical, new { htmlAttributes = new { @class = "form-control check", Id = "Phy" } })
                    @Html.ValidationMessageFor(model => model.Physical, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.ValueAccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.ValueAccomp, new { htmlAttributes = new { @class = "form-control check", Id = "valuea", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ValueAccomp, "", new { @class = "text-danger" })
                </div>

            </div>


            <div class="form-group">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Financial, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Financial, new { htmlAttributes = new { @class = "form-control check", Id = "fin" } })
                    @Html.ValidationMessageFor(model => model.Financial, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Expenditures, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Expenditures, new { htmlAttributes = new { @class = "form-control check", Id = "exped", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Expenditures, "", new { @class = "text-danger" })
                </div>

            </div>
            <hr />

            <div class="form-group">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.remarksAccomp, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.remarksAccomp, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.remarksAccomp, "", new { @class = "text-danger" })
                </div>

            </div>


        </div>



    </div>


    @*<div class="form-group">
        <span class="control-label col-md-2"><strong>Current Avatar</strong></span>
        <div class="col-md-10">
            <img src="~/Pic/filelogo.png" alt="avatar" />
        </div>
    </div>


    <div class="form-group">
        @Html.Label("Avatar", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" id="Avatar" name="upload" />
        </div>
    </div>*@




    <div id="divProcessing">
        @*<p>Processing, please wait . . . <img src="../../Content/ajax-loader.gif"></p>*@
    </div>


    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">Cancel</button>
        <input class="btn btn-primary" type="submit" value="Update" id="btnupdate" />
    </div>




}

<style>
    #divProcessing {
        display: none;
    }

        #divProcessing.show {
            display: block;
            position: absolute;
            z-index: 100;
            background-image: url('../../Content/ajax-loader.gif');
            background-color: #666;
            opacity: 0.4;
            background-repeat: no-repeat;
            background-position: center;
            left: 0;
            bottom: 0;
            right: 0;
            top: 0;
        }

    #loadinggif.show {
        left: 50%;
        top: 50%;
        position: absolute;
        z-index: 101;
        width: 32px;
        height: 32px;
        margin-left: -16px;
        margin-top: -16px;
    }
</style>

<script type="text/javascript">

    $(function () {


        var valFocusinNew = $('#newarea').val();
        var valFocusinRestore = $('#restorearea').val();
        var valFocusinRehab = $('#rehabarea').val();
        var valFocusinCanal = $('#canalsaccomp').val();
        var valFocusinCanalLining = $('#canal_liningaccomp').val();
        var valFocusinStructure = $('#structuresaccomp').val();
        var valFocusinJobs = $('#jobsaccomp').val();
        var valFocusinFB = $('#fbaccomp').val();
        var valFocusinRoad = $('#roadsaccomp').val();
        var valFocusinhdpe = $('#HDPEACCOMP').val();
        var valFocusincoconet = $('#COCONETACCOMP').val();
        var valFocusingravel = $('#GRAVELACCOMP').val();
        var valFocusinphysical = $('#Phy').val();
        var valFocusinfinancial = $('#fin').val();
        var valFocusinvalueacc = $('#valuea').val();
        var valFocusinexpenditures = $('#exped').val();


        console.log(valFocusinphysical);
        console.log(valFocusinNew);
        console.log(valFocusinRestore);
        $(".check").blur(function () {

            //console.log("after");
            //console.log(valFocusinNew);
            //console.log(valFocusinRestore);
            //console.log($(this).val());


            var error = '';
            error = "Accomplishment must be greater or equal to previous month!";
            var myvalue = parseFloat($(this).val());
            var myid = $(this).attr('Id');

            //if (myid == 'newarea') {

            //    if (valFocusinNew > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();
            //        $(this).val(valFocusinNew);
            //    }


            //}
            //if (myid == 'restorearea') {

            //    if (valFocusinRestore > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinRestore);
            //    }


            //}

            //if (myid == 'rehabarea') {

            //    if (valFocusinRehab > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinRehab);
            //    }


            //}
            //if (myid == 'canalsaccomp') {

            //    if (valFocusinCanal > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinCanal);
            //    }


            //}
            //if (myid == 'canal_liningaccomp') {

            //    if (valFocusinCanalLining > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinCanalLining);
            //    }


            //}
            //if (myid == 'structuresaccomp') {

            //    if (valFocusinStructure > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinStructure);
            //    }


            //}
            //if (myid == 'jobsaccomp') {

            //    if (valFocusinJobs > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinJobs);
            //    }


            //}
            //if (myid == 'fbaccomp') {

            //    if (valFocusinFB > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinFB);
            //    }


            //}
            //if (myid == 'roadsaccomp') {

            //    if (valFocusinRoad > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinRoad);
            //    }


            //}
            //if (myid == 'HDPEACCOMP') {

            //    if (valFocusinhdpe >myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinhdpe);
            //    }


            //}


            //if (myid == 'COCONETACCOMP') {

            //    if (valFocusincoconet > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusincoconet);
            //    }


            //}
            //if (myid == 'GRAVELACCOMP') {

            //    if (valFocusingravel > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusingravel);
            //    }


            //}
            //if (myid == 'Phy') {
            //    if ((valFocusinphysical) > (myvalue)) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();
            //        $("#valuea").val(valFocusinvalueacc);
            //        $(this).val(valFocusinphysical);
            //    }


            //}
            //if (myid == 'fin') {

            //    if (valFocusinfinancial > myvalue) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();
            //        $("#exped").val(valFocusinexpenditures);
            //        $(this).val(valFocusinfinancial);
            //    }


            //}



            //if (myid == 'valuea') {
            // //   alert("a");
            //    if (valFocusinvalueacc > $(this).val()) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinvalueacc);
            //    }


            //}


            //if (myid == 'exped') {

            //    if (valFocusinexpenditures > $(this).val()) {
            //        $("#errormessage").html(error).show().delay(5000).fadeOut();

            //        $(this).val(valFocusinexpenditures);
            //    }


            //}




        });

        $("#btnupdate").click(function () {

            //    alert('hellow');

        });

        setTimeout(function () {

            $('.fde').hide('fade');

        }, 5000);

        $("#fin").keyup(function (event) {
            var myval = parseFloat($("#fin").val());
            var amt = parseFloat($("#amt").val());

            $("#exped").val(((myval * amt * 10)));

        });

        $("#Phy").keyup(function (event) {

            var ival = parseFloat($("#Phy").val());
            var amt1 = parseFloat($("#amt").val());
            $("#valuea").val((ival * amt1 * 10));

        });

        var dateTodays = "0" + $('#mnts').val() + "/1/" + $('#yrs').val();
        var dateToday = new Date(dateTodays);
        //   alert(dateToday)
        $('#mndt').datepicker(
                       {
                           dateFormat: "mm/yy",
                           changeMonth: true,
                           changeYear: true,
                           showButtonPanel: true,
                           minDate: dateToday,
                           onClose: function (dateText, inst) {


                               function isDonePressed() {
                                   return ($('#ui-datepicker-div').html().indexOf('ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all ui-state-hover') > -1);
                               }

                               if (isDonePressed()) {
                                   var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
                                   var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
                                   $(this).datepicker('setDate', new Date(year, month, 1)).trigger('change');


                                   var a = parseInt($("#ui-datepicker-div .ui-datepicker-month :selected").val());
                                   var b = parseInt(1);
                                   var c = a + b;


                                   $('#mnts').val(c);

                                   $('#yrs').val(year);

                                   $('.date-picker').focusout()//Added to remove focus from datepicker input box on selecting date
                               }
                           },
                           beforeShow: function (input, inst) {

                               inst.dpDiv.addClass('month_year_datepicker')

                               if ((datestr = $(this).val()).length > 0) {
                                   year = datestr.substring(datestr.length - 4, datestr.length);
                                   month = datestr.substring(0, 2);
                                   $(this).datepicker('option', 'defaultDate', new Date(year, month - 1, 1));
                                   $(this).datepicker('setDate', new Date(year, month - 1, 1));
                                   $(".ui-datepicker-calendar").hide();
                               }
                           }
                       })


    });

</script>

<style>
    .ui-datepicker-calendar {
        display: none;
    }
</style>